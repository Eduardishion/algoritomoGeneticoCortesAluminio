/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package intefaz;

import classesIndividuos.individuoPer;
import java.awt.BasicStroke;
import java.awt.Color;
//import javafx.scene.chart.NumberAxis;
import javax.swing.AbstractButton;
import javax.swing.JFrame;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.RectangleInsets;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartUtilities;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.RefineryUtilities;
import procedimientos.metodosDecimales.generadorDePoblacionPer;
import valoresTablaPerfiles.perfil;

/**
 *
 * @author Eduardishion
 */
public class interfaz extends javax.swing.JFrame {

    //objeto del generador de operaciones
    generadorDePoblacionPer obj1 = new generadorDePoblacionPer(10, 9, 1);
    ArrayList<perfil> vectorPerfilesTmp = new ArrayList<>();
    //imprementacion de diccionarios diccionario que dependiendo de la ID 1,2,3,... del perfil guarda el objeto de tipo perfil 
    Map<Integer, Double> MedidaDePerfiles = new HashMap<>();
    //Hashtable<String, Integer> personasyEdades = new Hashtable<String, Integer>();
    double estandarPerfi = 0.0;
    
    /*
     * Creates new form interfaz
     */
    public interfaz() {

        initComponents();
       
        estandarPerfil.setText("5.60");
        
        jLabel2.setEnabled(false);
        Cantidad_label.setEnabled(false);
        medidaP.enable(false);
        canti.enable(false);
        
        tindividuos.setEditable(false);
        tgeneraciones.setEditable(false);
        //tmaximo.setEditable(false);
        //tmaximo2.setEditable(false);
        //tmaximo3.setEditable(false);
        tmuestra.setEditable(false);
        tmuestra.setEnabled(false);
        smuestra.setEnabled(false);
        //smaximo.setEnabled(false);
        //smaximo2.setEnabled(false);
        //smaximo3.setEnabled(false);

        sgeneraciones.setValue(2);//cambiar a 3
        sindividuos.setValue(10);
        smuestra.setValue(2);
        //smaximo.setValue(1);
        //smaximo2.setValue(1);
        //smaximo3.setValue(1);

        porcentajeMutacion2.setSelectedIndex(1);
        //porcentajeMutacion3.setSelectedIndex(1);

        //seleciones.add(seleccionAletotia);
        seleciones.add(seleccionTorneo);
        //seleciones.add(seleccionMuestreoEstoco);

        //cruzas.add(cruzaunPunto);
        //cruzas.add(cruzadosPuntos);
        //cruzas.add(cruzapuntoUniforme);
        //cruzas.add(cruzamaneraAdaptativa);
        //cruzas.add(cruzaMultipunto);
        //cruzas.add(cruzaMultipuntoUniforme);
        //cruzas.add(cruzaMultipuntoAdaptativa);
        cruzas.add(cruzaPorOrden);
        cruzas.add(cruzaPorCiclos);

        mutacion.add(mutacionPorIntercambio);
        //mutacion.add(mutacionPorInsercion);

        //elemtos desmarcados que no spn editables estan desactivasdos
        //cruzaunPunto.setEnabled(false);
        //cruzadosPuntos.setEnabled(false);
        //cruzapuntoUniforme.setEnabled(false);
        //cruzaMultipuntoUniforme.setEnabled(false);
        //cruzamaneraAdaptativa.setEnabled(false);
        //cruzaMultipunto.setEnabled(false);
        //cruzaMultipuntoUniforme.setEnabled(false);
        //cruzaMultipuntoAdaptativa.setEnabled(false)
        //defalut valores
        seleccionTorneo.setSelected(true);
        cruzaPorOrden.setSelected(true);
        mutacionPorIntercambio.setSelected(true);
        smuestra.setEnabled(true);
        tmuestra.setEnabled(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        seleciones = new javax.swing.ButtonGroup();
        cruzas = new javax.swing.ButtonGroup();
        mutacion = new javax.swing.ButtonGroup();
        eleccion = new javax.swing.ButtonGroup();
        panelResultados = new javax.swing.JTabbedPane();
        panelPrincipal = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        generar = new javax.swing.JButton();
        guardar = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        inserarPerfiles = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        medidaP = new javax.swing.JTextField();
        Cantidad_label = new javax.swing.JLabel();
        canti = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        perfiles = new javax.swing.JTable();
        eliminaPerfil = new javax.swing.JButton();
        cambio = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        estandarPerfil = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        parametros = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        sindividuos = new javax.swing.JSlider();
        sgeneraciones = new javax.swing.JSlider();
        tindividuos = new javax.swing.JTextField();
        tgeneraciones = new javax.swing.JTextField();
        pesta√±as = new javax.swing.JTabbedPane();
        operadoresDeSeleccion = new javax.swing.JPanel();
        seleccionTorneo = new javax.swing.JRadioButton();
        smuestra = new javax.swing.JSlider();
        tmuestra = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        operadoresDeCruzaPermutaciones = new javax.swing.JPanel();
        cruzaPorOrden = new javax.swing.JRadioButton();
        cruzaPorCiclos = new javax.swing.JRadioButton();
        operadoresdeMutacion = new javax.swing.JPanel();
        mutacionPorIntercambio = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        porcentajeMutacion2 = new javax.swing.JComboBox();
        visualizacion = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultados = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 102, 102));

        panelPrincipal.setBorder(javax.swing.BorderFactory.createTitledBorder("Principal"));

        generar.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        generar.setText("Generar poblacion");
        generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarActionPerformed(evt);
            }
        });

        guardar.setText("Guardar imagen de grafica");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(generar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(generar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guardar, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addContainerGap())
        );

        inserarPerfiles.setText("Insertar perfil");
        inserarPerfiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserarPerfilesActionPerformed(evt);
            }
        });

        jLabel2.setText("Medida");

        medidaP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medidaPActionPerformed(evt);
            }
        });

        Cantidad_label.setText("Cantidad");

        perfiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No. Perfil", "Medida"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(perfiles);

        eliminaPerfil.setText("Eliminar Perfil");
        eliminaPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaPerfilActionPerformed(evt);
            }
        });

        cambio.setText("Insertar mas de uno");
        cambio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambioActionPerformed(evt);
            }
        });

        jLabel5.setText("Estandar de perfil");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(inserarPerfiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eliminaPerfil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(Cantidad_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(canti, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(medidaP, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(estandarPerfil))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(cambio)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inserarPerfiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(estandarPerfil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(cambio)
                .addGap(7, 7, 7)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Cantidad_label)
                    .addComponent(canti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(medidaP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eliminaPerfil)
                .addContainerGap())
        );

        parametros.setBorder(javax.swing.BorderFactory.createTitledBorder("Parametros de inicio"));

        jLabel1.setText("No¬∞ de individuos");

        jLabel3.setText("No¬∞ de generaciones");

        sindividuos.setMajorTickSpacing(10);
        sindividuos.setMaximum(3000);
        sindividuos.setMinimum(10);
        sindividuos.setPaintTicks(true);
        sindividuos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sindividuosStateChanged(evt);
            }
        });

        sgeneraciones.setMajorTickSpacing(5);
        sgeneraciones.setMaximum(3000);
        sgeneraciones.setMinimum(1);
        sgeneraciones.setPaintTicks(true);
        sgeneraciones.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sgeneracionesStateChanged(evt);
            }
        });

        javax.swing.GroupLayout parametrosLayout = new javax.swing.GroupLayout(parametros);
        parametros.setLayout(parametrosLayout);
        parametrosLayout.setHorizontalGroup(
            parametrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametrosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parametrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(parametrosLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(36, 36, 36)
                        .addComponent(sindividuos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(parametrosLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sgeneraciones, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
                        .addGap(4, 4, 4)))
                .addGroup(parametrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tgeneraciones, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(tindividuos))
                .addContainerGap())
        );
        parametrosLayout.setVerticalGroup(
            parametrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametrosLayout.createSequentialGroup()
                .addGroup(parametrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(parametrosLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel1))
                    .addComponent(sindividuos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tindividuos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(parametrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tgeneraciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(parametrosLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel3))
                    .addComponent(sgeneraciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Parametros de poblacion", parametros);

        operadoresDeSeleccion.setBorder(javax.swing.BorderFactory.createTitledBorder("Operadores de Seleccion"));

        seleccionTorneo.setText("Seleccion por Torneo");
        seleccionTorneo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionTorneoActionPerformed(evt);
            }
        });

        smuestra.setPaintTicks(true);
        smuestra.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                smuestraStateChanged(evt);
            }
        });

        jLabel4.setText("de los individuos posibles de la muestra ");

        javax.swing.GroupLayout operadoresDeSeleccionLayout = new javax.swing.GroupLayout(operadoresDeSeleccion);
        operadoresDeSeleccion.setLayout(operadoresDeSeleccionLayout);
        operadoresDeSeleccionLayout.setHorizontalGroup(
            operadoresDeSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operadoresDeSeleccionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(seleccionTorneo)
                .addGap(18, 18, 18)
                .addComponent(smuestra, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tmuestra, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addContainerGap(394, Short.MAX_VALUE))
        );
        operadoresDeSeleccionLayout.setVerticalGroup(
            operadoresDeSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operadoresDeSeleccionLayout.createSequentialGroup()
                .addGroup(operadoresDeSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(seleccionTorneo)
                    .addGroup(operadoresDeSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tmuestra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addGroup(operadoresDeSeleccionLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(smuestra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pesta√±as.addTab("Seleccion", operadoresDeSeleccion);

        operadoresDeCruzaPermutaciones.setBorder(javax.swing.BorderFactory.createTitledBorder("Operadores de Cruza"));

        cruzaPorOrden.setText("Cruza por orden");
        cruzaPorOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cruzaPorOrdenActionPerformed(evt);
            }
        });

        cruzaPorCiclos.setText("Cruza por ciclos");
        cruzaPorCiclos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cruzaPorCiclosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout operadoresDeCruzaPermutacionesLayout = new javax.swing.GroupLayout(operadoresDeCruzaPermutaciones);
        operadoresDeCruzaPermutaciones.setLayout(operadoresDeCruzaPermutacionesLayout);
        operadoresDeCruzaPermutacionesLayout.setHorizontalGroup(
            operadoresDeCruzaPermutacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operadoresDeCruzaPermutacionesLayout.createSequentialGroup()
                .addComponent(cruzaPorOrden)
                .addGap(29, 29, 29)
                .addComponent(cruzaPorCiclos)
                .addGap(0, 639, Short.MAX_VALUE))
        );
        operadoresDeCruzaPermutacionesLayout.setVerticalGroup(
            operadoresDeCruzaPermutacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operadoresDeCruzaPermutacionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(operadoresDeCruzaPermutacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cruzaPorOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cruzaPorCiclos))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        pesta√±as.addTab("Cruzas de Per", operadoresDeCruzaPermutaciones);

        operadoresdeMutacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Mutacion"));

        mutacionPorIntercambio.setText("Mutacion por intercambio");
        mutacionPorIntercambio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mutacionPorIntercambioActionPerformed(evt);
            }
        });

        jLabel7.setText("Probabilidad de mutacion");

        porcentajeMutacion2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0.0", "0.001", "0.0001", "0.00001", "0.000001", "0.0000001", "0.002", "0.003", "0.004", "0.005", "0.006", "0.007", "0.008", "0.009", "0.01", "0.011", "0.012", "0.013", "0.014", "0.015", "0.016", "0.017", "0.018", "0.019", "0.02", "0.03", "0.04", "0.05", "0.06", "0.07", "0.08", "0.09", "0.10", "0.11", "0.12", "0.13", "0.14", "0.15", "0.16", "0.17", "0.18", "0.19", "0.20", "0.21", "0.22", "0.23", "0.24", "0.25", "0.26", "0.27", "0.28", "0.29", "0.30", "0.35", "0.36", "0.37", "0.38", "0.39", "0.40", "0.41", "0.42", "0.43", "0.44", "0.45", "0.46", "0.47", "0.48", "0.49", "0.50", "0.55", "0.6", "0.65", "0.7", "0.75", "0.8", "0.85", "0.9", "0.95", "1.0" }));
        porcentajeMutacion2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porcentajeMutacion2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout operadoresdeMutacionLayout = new javax.swing.GroupLayout(operadoresdeMutacion);
        operadoresdeMutacion.setLayout(operadoresdeMutacionLayout);
        operadoresdeMutacionLayout.setHorizontalGroup(
            operadoresdeMutacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operadoresdeMutacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mutacionPorIntercambio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(porcentajeMutacion2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(515, Short.MAX_VALUE))
        );
        operadoresdeMutacionLayout.setVerticalGroup(
            operadoresdeMutacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operadoresdeMutacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(operadoresdeMutacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(operadoresdeMutacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mutacionPorIntercambio)
                        .addComponent(jLabel7))
                    .addComponent(porcentajeMutacion2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pesta√±as.addTab("Mutacion", operadoresdeMutacion);

        jTabbedPane1.addTab("Paramitros de operadores", pesta√±as);

        visualizacion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Visualizacion de comportamiento", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 0, 14), new java.awt.Color(102, 102, 102))); // NOI18N
        visualizacion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout visualizacionLayout = new javax.swing.GroupLayout(visualizacion);
        visualizacion.setLayout(visualizacionLayout);
        visualizacionLayout.setHorizontalGroup(
            visualizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        visualizacionLayout.setVerticalGroup(
            visualizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 459, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addComponent(visualizacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(visualizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPrincipalLayout.createSequentialGroup()
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panelResultados.addTab("Configuracion", panelPrincipal);

        resultados.setColumns(20);
        resultados.setRows(5);
        jScrollPane2.setViewportView(resultados);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1102, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE))
        );

        panelResultados.addTab("Resultados", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelResultados)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelResultados, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarActionPerformed
        int individuosPares = Integer.parseInt(tindividuos.getText());
        if (individuosPares % 2 == 1) {
            //si no es par 
            final JPanel panel = new JPanel();
            JOptionPane.showMessageDialog(panel, "Por favor ingresa una confifuracion de indiduos pares ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            estandarPerfi = Double.parseDouble(estandarPerfil.getText());
            
            
            long TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecuci√≥n
            TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
            
            //para la implementacion del diccionario de los perfiles 
            MedidaDePerfiles.clear();
            
            vectorPerfilesTmp.clear();
            perfiles.requestFocus();
            perfiles.changeSelection(0, 0, false, false);
            perfiles.editCellAt(0, 0);
            resultados.setText(""); 
            //int numeroColumnas = perfiles.getColumnCount();
            int numeroFilas = perfiles.getRowCount();
            ArrayList<perfil> vectorPerfiles = new ArrayList<perfil>();
            perfil perfil = null;

            
            
            
            
            for (int i = 0; i < numeroFilas; i++) {
                //for(int j=0; j<numeroColumnas; j++){
                perfil = new perfil();

                perfil.setNoPerfil(Integer.parseInt(perfiles.getValueAt(i, 0).toString()));
                //si alguna celda no tien valores masdar la exepcion de que no se an capturado datos en la celda 
                
                //try {
                perfil.setMedida(Double.parseDouble(perfiles.getValueAt(i, 1).toString()));
                //perfil.setCategoria(perfiles.getValueAt(i,2).toString());

                //} catch (Exception NumberFormatException) {
                //     final JPanel panel2 = new JPanel();
                //     JOptionPane.showMessageDialog(panel2, "has dejado una celda vacia al dar de alta las medidas", "Error", JOptionPane.ERROR_MESSAGE);
                //}
                
               
                vectorPerfiles.add(perfil);
                vectorPerfilesTmp.add(perfil);
                
                //para implementacion de diccionario para guardar perfiles 
                int IDclave = Integer.parseInt(perfiles.getValueAt(i, 0).toString());
                //System.out.println(""+IDclave);
                double medida = Double.parseDouble(perfiles.getValueAt(i, 1).toString());
                //System.out.print("\t"+medida);
                MedidaDePerfiles.put(IDclave,medida);
                
            }
            
            obj1.setEstandarPerfi(estandarPerfi);
            obj1.setVectorPerfiles(vectorPerfiles);
            obj1.setMedidaDePerfiles(MedidaDePerfiles);
            System.out.println("vector recuperado de tabla///////////////////////////*************");
            for (int i = 0; i < vectorPerfiles.size(); i++) {
                System.out.println(vectorPerfiles.get(i).getNoPerfil() + " " + vectorPerfiles.get(i).getMedida());
            }

            //try { 
            int numeroIndividuos = sindividuos.getValue();
            int numeroGeneraciones = sgeneraciones.getValue();

            //obj.redimecionarTodo(numeroIndividuos,numeroGenes,numeroGeneraciones);
            // TODO add your handling code here:
            if (seleccionTorneo.isSelected()) {
                obj1.setOpcionDeSeleccion("Torneo");
            } 

            /*
                               if(cruzaMultipunto.isSelected()){
                                   obj.setNumeroCortes(smaximo.getValue());
                               }else{
                                   if(cruzaMultipuntoUniforme.isSelected()){
                                       obj.setNumeroCortes(smaximo2.getValue());
                                   }else{
                                       if(cruzaMultipuntoAdaptativa.isSelected()){
                                           obj.setNumeroCortes(smaximo3.getValue());
                                       }
                                   }
                               }
             */
            obj1.setMuestra(smuestra.getValue());
            /* para elporcentaje de mitacion 
                               String porcentaje=(String)porcentajeMutacion.getSelectedItem();
                               obj.setPorcentaje(Double.parseDouble(porcentaje));
             */
 /*
                               if(sindividuos.getValue()==0){
                                   System.out.println("no hay datos de individuos");
                               }else{
                                   if(sgenes.getValue()==0){
                                       System.out.println("no hay datos en genes");
                                   }else{
                                       if(sindividuos.getValue()==0){
                                           System.out.println("no hay datos en generaciones");
                                       }
                                   }
                               }
             */

            if (cruzaPorOrden.isSelected()) {
                obj1.setOpcionCruza("cruzaPorOrden");
            } else if (cruzaPorCiclos.isSelected()) {
                obj1.setOpcionCruza("cruzaPorCiclos");
            }

            if (mutacionPorIntercambio.isSelected()) {
                obj1.setOpcionMutacion("mutacionPorIntercambio");
                String porcentaje = (String) porcentajeMutacion2.getSelectedItem();
                obj1.setPorcentaje(Double.parseDouble(porcentaje));
            }

            obj1.setNumeroDeIndividuos(numeroIndividuos);
            //obj1.setNumeroDeGenes(numeroGenes);
            obj1.setNumeroGeneraciones(numeroGeneraciones);

            //cuando es desde la tabla
            int numGenes = perfiles.getRowCount();
            obj1.setNumeroDeGenes(numGenes);

          
            //onjeto para generar poblaciones
            obj1.generarPoblacion();
            
            int num = obj1.getNumeroGeneraciones();
            
            //System.out.println("vector de mejores individuos de generacion desde interfaz***************");
            ArrayList<individuoPer> mejoresIndividuosPoblacionTmp = new ArrayList<individuoPer>();
            ArrayList<individuoPer> PromedioPorGeneracion = new ArrayList<individuoPer>();
            //ArrayList<individuoPer> todosLosidividuosGenerados = new ArrayList<individuoPer>();
            
            mejoresIndividuosPoblacionTmp=obj1.getMejoresIndividuosPoblacion();
            PromedioPorGeneracion=obj1.getPromedioPorGeneracion();
            //todosLosidividuosGenerados=obj1.getTodosLosidividuosGenerados();
            
            DecimalFormat formateador = new DecimalFormat("#.##"); //para mostrar
            /*
            for (int i = 0; i < mejoresIndividuosPoblacionTmp.size(); i++) {
               System.out.println(formateador.format(mejoresIndividuosPoblacionTmp.get(i).getValorAptitud()));
            }
            */
            
            
            float vector[] = new float[num];
            float vector2[] = new float[num];
            //float vector3[] = new float[todosLosidividuosGenerados.size()];

            for (int i = 0; i < vector.length; i++) {
                vector[i]= (float)mejoresIndividuosPoblacionTmp.get(i).getValorAptitud();
            }
            
            for (int i = 0; i < vector2.length; i++) {
                vector2[i]= (float)PromedioPorGeneracion.get(i).getValorDecimal();
            }

//            for (int i = 0; i < vector3.length; i++) {
//                vector3[i]= (float)todosLosidividuosGenerados.get(i).getValorAptitud();
//            }
            
            
            //guardado del conjunto de datos 
            XYSeriesCollection dataset = new XYSeriesCollection();
            XYSeries serie = new XYSeries("Mejores individuos por generacion");
            XYSeries serie2 = new XYSeries("Promedio por generacion");
            XYSeries serie3 = new XYSeries("Todos los individuos generados");
            ////////////////2
            XYSeries serie4 = new XYSeries("Mejores individuos por generacion");

            ////////////////2 para imprimirla en imagen al escritorio
            XYSeriesCollection dataset2 = new XYSeriesCollection();
            //DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();

            ////
            for (int i = 0; i < vector.length; i++) {
                serie.add((i + 1), vector[i]);
                ////////////////2
                serie4.add((i + 1), vector[i]);
                ///
            }
            for (int i = 0; i < vector2.length; i++) {
                serie2.add((i + 1), vector2[i]);
            }
            
//            for (int i = 0; i < vector3.length; i++) {
//                serie3.add((i + 1), vector3[i]);//////aqui tuvo el error Exception in thread "AWT-EventQueue-0" java.lang.OutOfMemoryError: Java heap space
//            }
            ////////////////2
            dataset2.addSeries(serie4);
            ////////////////2
            JFreeChart graficaescritorio = ChartFactory.createXYLineChart(
                    "Evolucion de individuos",
                    "Generaciones",
                    "F(x) de aptitud",
                    dataset2
            );
            ////////////////2
            //propiedades de visualizacion de la grafica 
            final XYPlot plot2 = graficaescritorio.getXYPlot();
            XYLineAndShapeRenderer renderer2 = new XYLineAndShapeRenderer();

            //color de linea 
            renderer2.setSeriesPaint(0, Color.magenta);
            graficaescritorio.setBackgroundPaint(new Color(236, 231, 236));

            //plot2.setRenderer(renderer2);

            plot2.setBackgroundPaint(Color.DARK_GRAY);
            //plot2.setAxisOffset(new RectangleInsets(5, 0, 10, 1));
            //plot.setRangeAxis(100, null);
            //plot2.setDomainCrosshairVisible(true);
            //plot2.setRangeCrosshairVisible(true);

            
            ////////////////2
            try {
                ChartUtilities.saveChartAsJPEG(new File("grafico2.jpg"), graficaescritorio, 500, 300);
            } catch (IOException e) {
                System.err.println("Error creando grafico.");
            }
            
            //
                      
            dataset.addSeries(serie);
            dataset.addSeries(serie2);
            //dataset.addSeries(serie3);

            //generacion del tipo de grafica 
            JFreeChart grafica = ChartFactory.createXYLineChart(
                    "Evolucion de individuos",
                    "Generaciones",
                    "F(x) de aptitud",
                    dataset
            );
            
            
            
            
            
            /*
            try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), grafica, 1000, 500);
                } catch (IOException ex) {
                    Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
                }
            */
            
            
            // panel para guardar la gracifa 
            ChartPanel panel = new ChartPanel(grafica);

            //propiedades de visualizacion de la grafica 
            final XYPlot plot = grafica.getXYPlot();
            XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();

            //color de linea 
            renderer.setSeriesPaint(0, Color.magenta);
            grafica.setBackgroundPaint(new Color(236, 231, 236));

            //renderer.setSeriesStroke( 0 , new BasicStroke(2.0f));
            //plot.getRangeAxis().setRange(0,0.0001);
            //renderer.setBaseShapesVisible(true);
            //renderer.setBaseShapesFilled (true);
            //plot.setRenderer(renderer); para poner puntos
            //plot.setRenderer(10, renderer);
            plot.setBackgroundPaint(Color.DARK_GRAY);
            //plot.setAxisOffset(new RectangleInsets());
            plot.setAxisOffset(new RectangleInsets(0, 1, 0, 1));
            //plot.setRangeAxis(100, null);
            plot.setDomainCrosshairVisible(true);
            plot.setRangeCrosshairVisible(true);
            
            //ChartPanel Panel2 = new ChartPanel(grafica);
            //JFrame Ventana = new JFrame("Evolucion");
            //Ventana.getContentPane().add(Panel2);
            //Ventana.pack();
            //Ventana.setVisible(true);


            
          
            //chart
            visualizacion.updateUI();
            visualizacion.repaint();
            visualizacion.removeAll();
            visualizacion.setLayout(new java.awt.BorderLayout());
            visualizacion.add(panel);
            visualizacion.validate();

            if (guardar.isSelected()) {
                try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), grafica, 1000, 500);
                } catch (IOException ex) {
                    Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
           ////////////perfiles a cortar//////////////   
           resultados.append("Perfiles a cortar:");
           resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea  
           resultados.append("No.Perfil\t\t\tMedida de Perfil");
           resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea   
           for (int i = 0; i < vectorPerfilesTmp.size(); i++) {
             resultados.append(vectorPerfilesTmp.get(i).getNoPerfil()+"\t\t\t"+vectorPerfilesTmp.get(i).getMedida());
             resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea    
           }
           //////////////////////////////////////////
           ////////////listado de individuos denerados/////////////////////////
           resultados.append("lista de mejores individuos generados de todas las generaciones\n"); 
           resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
           DecimalFormat formateador2 = new DecimalFormat("#.##"); //para mostrar
           resultados.append("Individuo\t\t\tValor Aptitud");
           resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
           for (int i = 0; i < mejoresIndividuosPoblacionTmp.size(); i++) { 
                    resultados.append(i+".-");
                    int[] cromosoma = mejoresIndividuosPoblacionTmp.get(i).getCromosoma();
                    resultados.append("[");
                    for (int j = 0; j < cromosoma.length; j++) {
                        resultados.append(cromosoma[j]+"|");
                    }
                    resultados.append("]");
                    resultados.append("\t\t"+formateador.format(mejoresIndividuosPoblacionTmp.get(i).getValorAptitud()));
                    resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
           } 
           /////////////////////////////////////////////////////////////////////
             
             double valorAptitud = 0.0;// valor de aptitud del mejor 
             resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
             //cromosoma final
             resultados.append("Individuo mejor de ultima generacion...");
             int ultimo = mejoresIndividuosPoblacionTmp.size();
             float funAptitud = (float) mejoresIndividuosPoblacionTmp.get(ultimo-1).getValorAptitud();
             int[] cromosomaTmp = mejoresIndividuosPoblacionTmp.get(ultimo-1).getCromosoma();
             for (int i = 0; i < cromosomaTmp.length; i++) {
                 resultados.append("["+cromosomaTmp[i]+"]");
             }
             resultados.append("\nsu funcion de aptitud es:"+funAptitud);
             resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea
             
             
            ///////////////////////////////////////////////////////////////////para poder cambiar la impresion para el tama√±o del perfil
            
            int z = 0;
            double perfilNuevo  =estandarPerfi;
            //double perfilNuevo  =6.10;//original
            double desperdicioTotalDePerfiles=0.0;
            int cantidadperfiles=0;
            resultados.append("\nPN: significa el perfil nuevo");
            resultados.append("\nPA: significa el perfil a cortar");
            resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
            do{ 
                
                double medidaPerfilA = buscarMedidaPerfil(cromosomaTmp[z],vectorPerfilesTmp);
                //resultados.append("\nCorta una medida de :"+formateador.format(medidaPerfilA));
                boolean esMayor = true;
                double PN  = obj1.fijarNumero(perfilNuevo,2);
                double PAC = obj1.fijarNumero(medidaPerfilA,2);
                resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea                              
                resultados.append("PN: "+PN);
                if(PN >= PAC){
                    esMayor = true;
                }else{
                    esMayor = false;
                }
                if(esMayor == true){
                    perfilNuevo=perfilNuevo-PAC;
                    resultados.append(" - PA: "+PAC+"   PN: al restar: "+PN+"   Perfil a cortar: "+PAC);
                }else{
                    resultados.append("*****");
                    resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea  
                    double desperdicioPP=PN;
                    double DESPP = obj1.fijarNumero(desperdicioPP,2);
                    desperdicioTotalDePerfiles=desperdicioTotalDePerfiles+DESPP;
                    cantidadperfiles++;
                    resultados.append("Desperdicio de perfil "+cantidadperfiles+": "+DESPP);
                    perfilNuevo=estandarPerfi;
                    //perfilNuevo=6.10; original
                     resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
                    resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
                    resultados.append("PN: "+perfilNuevo);
                    perfilNuevo=perfilNuevo-PAC;
                    resultados.append(" - PA: "+PAC+"   PN: al restar: "+PN+"   Perfil a cortar: "+PAC);
                    esMayor = true;
                }
                z++;
            }while(z < cromosomaTmp.length);
            cantidadperfiles++;
            resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
            resultados.append("Desperdicio de perfil "+cantidadperfiles+": "+formateador.format(perfilNuevo));
            resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
            //resultados.append("\nPNF:"+formateador.format(perfilNuevo));
            resultados.append("\nCantidad de perfiles a usar:"+cantidadperfiles);
            resultados.append("\nDesperdicio total De perfiles sin Ultimo: "+formateador.format(desperdicioTotalDePerfiles));
            resultados.append("\nDesperdicio de todos los Perfiles Usados: "+formateador.format(desperdicioTotalDePerfiles+perfilNuevo));
            resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
            resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
            resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
            resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
            resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
            resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
            
            vector = null;
            vector2 = null;
            //vector3 = null;
            mejoresIndividuosPoblacionTmp.clear();
            PromedioPorGeneracion.clear();
            //todosLosidividuosGenerados.clear();
            /////////////////////////////////////////////////////////////////////
             /*
             int x = 0;
             double perfilNuevo  =6.10;
             double sumatoriaDeperfiles =0.0;
             double desperdicioPorPerfil=0.0;
             double desperdicioTotalDePerfiles=0.0;
             ArrayList<Double> desperdicios = new ArrayList<Double>(); 
             int cantidadperfil=0;
             
             do{ 

                 double medidaPerfilAcortar = obj1.buscarMedidaPerfil(cromosoma[x],vectorPerfilesTmp);
                 resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea                            
                 resultados.append("PN: "+formateador.format(perfilNuevo));

                 boolean verificacion = true;
                 sumatoriaDeperfiles = sumatoriaDeperfiles + medidaPerfilAcortar;

                 if(perfilNuevo > sumatoriaDeperfiles){
                     verificacion = true;
                 }else{
                     verificacion = false;
                 }
                 int i=0;
                 if(verificacion == false){

                           //despues de saber que la sumatoria de perfilesa a cortar a sobre 
                           //pasado al perfil nuevo lo que se hace es restar el ultimo 
                           //perfil a cortar que indica que es mayor al perfil nuevo 
                           //para que se tenga la sumatoria anterior que no sobre pasa 
                           //al perfil nuevo para poder hacer la operacion correcto 
                           //y no obtener negativos 
                         sumatoriaDeperfiles=sumatoriaDeperfiles-medidaPerfilAcortar;
                           //despues de haber restado el ultimo perfil hasta ese momento 
                           //se hace la operacion de restar la sumatoria de perfiles 
                           //al perfil nuevo que dara como resultado el desperdicio
                         perfilNuevo=perfilNuevo-sumatoriaDeperfiles;
                           //lo que salga de ese ressultado lo agragamos a desperdicio de ese unico perfil
                         desperdicioPorPerfil=perfilNuevo;
                         desperdicios.add(desperdicioPorPerfil);
                         cantidadperfil++;
                         resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
                         resultados.append("Perfil: "+cantidadperfil);
                         resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
                         resultados.append("Se hizo un desperdicio de: "+formateador.format(desperdicioPorPerfil));
                         resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
                         //despues ese desperdicio de ese unico perfil se almacena en el total de 
                         //de desperdicios de todos los perfiles
                         desperdicioTotalDePerfiles = desperdicioTotalDePerfiles + desperdicioPorPerfil;

                           //los contadores de sumatoria y perdil nuevo toman su valor original
                         sumatoriaDeperfiles = 0.0;
                         perfilNuevo =6.10;

                           //hasta este punto se ha receteado todo pero no se empesado a usar otro  perfil
                           //mas sin embargo exiten aun perfiles que cortar por ello se tiene comprendido que se
                           //resto un ultimo perfil a cortar que sobre pasaba la sumatoria 
                           //ese perfil debe de ser evaluado nuevamente pero con un nuevo perfil de la siguiente manera
                           //entonces se agregara a la nueva sumatoria de perfiles que atras se havia resetado 
                           //y quedado en cero hasta este puento se a iniciado una nueva comparacion 
                           //con otro nuevo perfil 
                           //y se inicia nuevamente el mismo procesimiento
                         resultados.append("PN: "+formateador.format(perfilNuevo));
                         sumatoriaDeperfiles = sumatoriaDeperfiles + medidaPerfilAcortar;
                         //System.out.print(" > SUMA: "+formateador.format(sumatoriaDeperfiles)+" ------>    MPA: "+formateador.format(medidaPerfilAcortar));
                         verificacion = true;
                 }
                 resultados.append(" > SUMA: "+formateador.format(sumatoriaDeperfiles)+" ------>    MPA: "+formateador.format(medidaPerfilAcortar));
                  //System.out.print("\nPerfil faltante: "+formateador.format(perfilNuevoTmp)); 

                  x++;
             }while(x < cromosoma.length);
             cantidadperfil++;
             resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
             resultados.append("Perfil: "+cantidadperfil);
             for (int i = 0; i < desperdicios.size(); i++) {
                 System.out.println(","+desperdicios.get(i));
             }
             resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
             //resultados.append("sumatoria"+sumatoriaDeperfiles);
             float ultimoDesperdicio =(float) (6.10-sumatoriaDeperfiles);
             //resultados.append("desperdicio ultimo perfil"+ ultimoDesperdicio);
             resultados.append("Se hizo un desperdicio de: "+formateador.format(ultimoDesperdicio));
             resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
             //resultados.append("desperdicio de primer perfil"+ desperdicios.get(0));

             //System.out.println("ultimo perfil fue.>>>>>>>"+cromosoma[x-1]);
             //ultimo perfil 
             //double medidaDeUltimoPerfil = buscarMedidaPerfil(cromosoma[x-1],vectorPerfiles);
             //System.out.println("\nEl desperdicio total de perfiles usados: "+((desperdicioTotalPerfil+perfilNuevoTmp)-medidaDeUltimoPerfil));
             //System.out.println("\nEl desperdicio total de perfiles usados: "+((desperdicioTotalPerfil+perfilNuevoTmp)));
             resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
             //resultados.append("El desperdicio total de perfiles usados2: "+formateador.format(desperdicioTotalDePerfiles));
             resultados.append("La cantidad de perdiles usados nuevos fueron:"+cantidadperfil);
             resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
             resultados.append("El desperdicio total de de todos los perfiles fue: "+formateador.format(desperdicioTotalDePerfiles+ultimoDesperdicio));
             resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
             //resultados.append("El desperdicio total de perfiles usados2 mas el ultimo desperdicio menos el primer desperdicio: "+formateador.format((desperdicioTotalDePerfiles+ultimoDesperdicio)-desperdicios.get(0)));
             resultados.append("El desperdicio final mas grande usable es de: "+formateador.format(ultimoDesperdicio));
             resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
             resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
             resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
             resultados.append("********************************************************************");
             //valorAptitud = ((desperdicioTotalPerfil+perfilNuevoTmp));
             /////valorAptitud = desperdicioTotalDePerfiles;
             //valorAptitud = (desperdicioTotalDePerfiles+ultimoDesperdicio);
             //valorAptitud = (desperdicioTotalDePerfiles+ultimoDesperdicio)-desperdicios.get(0);
             /////resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
             /////resultados.append("El valor de la funcion de aptitud del individuo: "+formateador.format(valorAptitud));
             */
             
           /////////////////////////////////////////////////////////////////////
           
           /* ejemplo para imprimir en text area
           for (int i = 0; i < mejoresIndividuosPoblacionTmp.size(); i++) {               
               resultados.append("Generacion: "+(i+1)); 
               resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea 
               obj1.obtencionDeResultados(mejoresIndividuosPoblacionTmp.get(i).getCromosoma(),vectorPerfiles);
               //resultados.append("Individuo"+formateador.format((float)mejoresIndividuosPoblacionTmp.get(i).getValorAptitud())); 
               resultados.append(System.getProperty("line.separator")); // Esto para el salto de l√≠nea
               
           }
           */
           
           
           TFin = System.currentTimeMillis(); //Tomamos la hora en que finaliz√≥ el algoritmo y la almacenamos en la variable T
           tiempo = TFin - TInicio; //Calculamos los milisegundos de diferencia
           System.out.println("Tiempo de ejecuci√≥n en milisegundos: " + tiempo); //Mostramos en pantalla el tiempo de ejecuci√≥n en milisegundos
        }
    }//GEN-LAST:event_generarActionPerformed
    /**
     * inserarPerfilesActionPerformed metodo permite insetar medidas de perfiles
     * ya sea de uno en uno o por un lote de medidas iguales
     * @param evt 
     */
    private void inserarPerfilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserarPerfilesActionPerformed
        //para ir agregando una celda a la vez 

        if(!cambio.isSelected()){
            DefaultTableModel temp = (DefaultTableModel) perfiles.getModel();
            Object nuevo[] = {temp.getRowCount() + 1, "", ""};
            temp.addRow(nuevo);
        }else{
            DefaultTableModel temp2 = (DefaultTableModel) perfiles.getModel();
            int  cantidadDeCortes = Integer.parseInt(canti.getText());
            String  medidas = medidaP.getText();  
            //String med = String.valueOf(medidas);
            int num= cantidadDeCortes+perfiles.getRowCount();
            temp2.setRowCount(num);            
            for (int i = 0; i < perfiles.getRowCount(); i++) {
                perfiles.setValueAt(i+1,i,0);
                if(perfiles.getValueAt(i,1)==null){
                    perfiles.setValueAt(medidas,i,1);
                }
  
            }
            canti.setText("");
            medidaP.setText("");
        }
            
            
        
        
        //para agregar un conjuto de celdas N 
        //DefaultTableModel temp2 = (DefaultTableModel) perfiles.getModel();
        //int  cantidadDeCortes = Integer.parseInt(canti.getText());
        //temp.setRowCount(ABORT);
        
        //temp.setRowCount(5);
        
    }//GEN-LAST:event_inserarPerfilesActionPerformed
    /**
     * eliminaPerfilActionPerformed metodo que alimina el perfil desde el ultimo perfil 
     * ingresado de uno a uno en la interfaz grafica 
     * @param evt 
     */
    private void eliminaPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaPerfilActionPerformed
        // TODO add your handling code here:
        try {
            DefaultTableModel temp = (DefaultTableModel) perfiles.getModel();
            temp.removeRow(temp.getRowCount() - 1);
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }//GEN-LAST:event_eliminaPerfilActionPerformed

    private void porcentajeMutacion2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porcentajeMutacion2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porcentajeMutacion2ActionPerformed

    private void mutacionPorIntercambioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mutacionPorIntercambioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mutacionPorIntercambioActionPerformed

    private void cruzaPorCiclosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cruzaPorCiclosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cruzaPorCiclosActionPerformed

    private void cruzaPorOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cruzaPorOrdenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cruzaPorOrdenActionPerformed

    private void smuestraStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_smuestraStateChanged
        // TODO add your handling code here:
        tmuestra.setText("" + smuestra.getValue());
        smuestra.setMaximum(sindividuos.getValue());
        smuestra.setMinimum(2);
    }//GEN-LAST:event_smuestraStateChanged

    private void seleccionTorneoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionTorneoActionPerformed
        // TODO add your handling code here:
        smuestra.setEnabled(true);
        tmuestra.setEnabled(true);
    }//GEN-LAST:event_seleccionTorneoActionPerformed

    private void sgeneracionesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sgeneracionesStateChanged
        // TODO add your handling code here:
        tgeneraciones.setText("" + sgeneraciones.getValue());
    }//GEN-LAST:event_sgeneracionesStateChanged

    private void sindividuosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sindividuosStateChanged
        // TODO add your handling code here:
        tindividuos.setText("" + sindividuos.getValue());
    }//GEN-LAST:event_sindividuosStateChanged

    private void medidaPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medidaPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_medidaPActionPerformed

    private void cambioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambioActionPerformed
        // TODO add your handling code here:
        if(cambio.isSelected()){
            jLabel2.setEnabled(true);
            Cantidad_label.setEnabled(true);
            medidaP.enable(true);
            canti.enable(true);
        }else{
            jLabel2.setEnabled(false);
            Cantidad_label.setEnabled(false);
            medidaP.enable(false);
            canti.enable(false);
        }
            
            
    }//GEN-LAST:event_cambioActionPerformed
    
    public double buscarMedidaPerfil(int noPerfil,ArrayList <perfil> vectorPerfiles){
        double medida=0.0;
        
        for (int i = 0; i < vectorPerfiles.size(); i++) {
            if(vectorPerfiles.get(i).getNoPerfil() == noPerfil){
                medida=vectorPerfiles.get(i).getMedida();
            }
        }
        return medida;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Cantidad_label;
    private javax.swing.JCheckBox cambio;
    private javax.swing.JTextField canti;
    private javax.swing.JRadioButton cruzaPorCiclos;
    private javax.swing.JRadioButton cruzaPorOrden;
    private javax.swing.ButtonGroup cruzas;
    private javax.swing.ButtonGroup eleccion;
    private javax.swing.JButton eliminaPerfil;
    private javax.swing.JTextField estandarPerfil;
    private javax.swing.JButton generar;
    private javax.swing.JCheckBox guardar;
    private javax.swing.JButton inserarPerfiles;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField medidaP;
    private javax.swing.ButtonGroup mutacion;
    private javax.swing.JRadioButton mutacionPorIntercambio;
    private javax.swing.JPanel operadoresDeCruzaPermutaciones;
    private javax.swing.JPanel operadoresDeSeleccion;
    private javax.swing.JPanel operadoresdeMutacion;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JTabbedPane panelResultados;
    private javax.swing.JPanel parametros;
    private javax.swing.JTable perfiles;
    private javax.swing.JTabbedPane pesta√±as;
    private javax.swing.JComboBox porcentajeMutacion2;
    private javax.swing.JTextArea resultados;
    private javax.swing.JRadioButton seleccionTorneo;
    private javax.swing.ButtonGroup seleciones;
    private javax.swing.JSlider sgeneraciones;
    private javax.swing.JSlider sindividuos;
    private javax.swing.JSlider smuestra;
    private javax.swing.JTextField tgeneraciones;
    private javax.swing.JTextField tindividuos;
    private javax.swing.JTextField tmuestra;
    private javax.swing.JPanel visualizacion;
    // End of variables declaration//GEN-END:variables
}
